{
    "env": {
        "browser": true,
        "es2022": true,
        "jest/globals": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:jest/recommended",
        "plugin:jsdoc/recommended"
    ],
    "parserOptions": {
        "sourceType": "module",
        "createDefaultProgram": true
    },
    "plugins": [
        "eslint-plugin-import",
        "eslint-plugin-jest",
        "eslint-plugin-jsdoc",
        "eslint-plugin-prefer-arrow"
    ],
    "ignorePatterns": [
        "__mocks__/**/*",
        "coverage/**/*",
        "dist/**/*",
        "node_modules/**/*",
        "webpack.config.js",
        "demo/**/*"
    ],
    "rules": {
        "arrow-parens": ["off", "always"],
        "brace-style": ["off", "off"],
        "comma-dangle": "off",
        "complexity": "off",
        "constructor-super": "error",
        "eol-last": "off",
        "eqeqeq": ["error", "smart"],
        "for-direction": "error",
        "getter-return": "error",
        "guard-for-in": "error",
        "id-blacklist": [
            "error",
            "any",
            "Number",
            "number",
            "String",
            "string",
            "Boolean",
            "boolean",
            "Undefined",
            "undefined"
        ],
        "id-match": "error",
        "import/no-default-export": "off",
        "import/order": "off",
        "indent": ["off"],
        "jest/no-commented-out-tests": "off",
        "jest/no-disabled-tests": "warn",
        "jest/expect-expect": "off",
        "jest/no-focused-tests": "error",
        "jest/no-identical-title": "error",
        "jest/prefer-to-have-length": "off",
        "jest/valid-expect": "error",
        "jest/valid-expect-in-promise": "off",
        "jsdoc/check-alignment": "error",
        "jsdoc/check-indentation": "off",
        "jsdoc/newline-after-description": "off",
        "jsdoc/require-jsdoc": [
            "error",
            {
                "contexts": [
                    // All interfaces
                    "TSInterfaceDeclaration",
                    // All exported type declarations
                    "TSTypeAliasDeclaration[modifiers='ExportKeyword']",
                    // All enums
                    "TSEnumDeclaration",
                    // All enum members
                    "TSEnumMember",
                    // This would enforce completed-docs on all namespaces that are not exported, but throws off how we would need to write exported namespaces
                    // because the plugin doesn't pick up jsDoc comments on exported namespaces as it does with non-exported namespaces. We would need to just
                    // write namespace NameOfNamespace and export { NameOfNamespace } at the bottom of the file.
                    // "TSModuleDeclaration",
                    // All exported variables that have some declaration type, including namespaces.
                    // Does not enforce on something like export type { ComboSelectTypes } from "./ComboSelect";
                    "ExportNamedDeclaration[declaration.type]",
                    // All arrow functions except those that are an object property, JSX prop, call expression (e.g. .map or filter(() => {})), or new expression (e.g. new Promise(() => {}))
                    "ArrowFunctionExpression:not(Property ArrowFunctionExpression):not(JSXAttribute ArrowFunctionExpression):not(CallExpression ArrowFunctionExpression):not(NewExpression ArrowFunctionExpression)",
                    // All function expressions except those that are an object property, like those in firebaseMockTypes.ts
                    "FunctionExpression:not(Property FunctionExpression)"
                ],
                "require": {
                    "FunctionDeclaration": true,
                    "MethodDefinition": true,
                    "ClassDeclaration": true,
                    "ArrowFunctionExpression": false,
                    "FunctionExpression": false
                }
            }
        ],
        "jsdoc/require-param-type": "off",
        "jsdoc/require-returns-type": "off",
        "linebreak-style": "off",
        "max-classes-per-file": "off",
        "max-len": "off",
        "new-parens": "error",
        "newline-per-chained-call": "off",
        "no-array-constructor": "off",
        "no-async-promise-executor": "off",
        "no-bitwise": "off",
        "no-caller": "error",
        "no-case-declarations": "error",
        "no-class-assign": "error",
        "no-compare-neg-zero": "error",
        "no-cond-assign": "error",
        "no-console": [
            "error",
            {
                "allow": [
                    "warn",
                    "dir",
                    "timeLog",
                    "assert",
                    "clear",
                    "count",
                    "countReset",
                    "group",
                    "groupEnd",
                    "table",
                    "dirxml",
                    "error",
                    "groupCollapsed",
                    "Console",
                    "profile",
                    "profileEnd",
                    "timeStamp",
                    "context"
                ]
            }
        ],
        "no-const-assign": "error",
        "no-constant-condition": "error",
        "no-control-regex": "error",
        "no-debugger": "error",
        "no-delete-var": "error",
        "no-dupe-args": "error",
        "no-dupe-class-members": "error",
        "no-dupe-else-if": "error",
        "no-dupe-keys": "error",
        "no-duplicate-case": "error",
        "no-empty": "error",
        "no-empty-character-class": "error",
        "no-empty-function": "off",
        "no-empty-pattern": "error",
        "no-eval": "error",
        "no-ex-assign": "error",
        "no-extra-boolean-cast": "error",
        "no-extra-semi": "off",
        "no-fallthrough": "off",
        "no-func-assign": "error",
        "no-global-assign": "error",
        "no-import-assign": "error",
        "no-inner-declarations": "error",
        "no-invalid-regexp": "error",
        "no-invalid-this": "off",
        "no-irregular-whitespace": "off",
        "no-misleading-character-class": "error",
        "no-mixed-spaces-and-tabs": "error",
        "no-multiple-empty-lines": "off",
        "no-new-symbol": "error",
        "no-new-wrappers": "error",
        "no-obj-calls": "error",
        "no-octal": "error",
        "no-prototype-builtins": "off",
        "no-redeclare": "off",
        "no-regex-spaces": "error",
        "no-self-assign": "error",
        "no-setter-return": "error",
        "no-shadow-restricted-names": "error",
        "no-sparse-arrays": "error",
        "no-template-curly-in-string": "error",
        "no-this-before-super": "error",
        "no-throw-literal": "error",
        "no-trailing-spaces": "off",
        "no-undef": "off",
        "no-undef-init": "error",
        "no-underscore-dangle": "error",
        "no-unexpected-multiline": "error",
        "no-unreachable": "error",
        "no-unsafe-finally": "error",
        "no-unsafe-negation": "error",
        "no-unused-labels": "error",
        "no-unused-vars": "off",
        "no-useless-catch": "error",
        "no-useless-escape": "off",
        "no-var": "error",
        "no-with": "error",
        "object-shorthand": "error",
        "one-var": ["error", "never"],
        "prefer-arrow/prefer-arrow-functions": "off",
        "prefer-const": "error",
        "quote-props": "off",
        "quotes": ["error", "double"],
        "radix": "error",
        "require-yield": "error",
        "semi": ["error", "always"],
        "space-before-function-paren": "off",
        "space-in-parens": ["off", "never"],
        "spaced-comment": [
            "error",
            "always",
            {
                "markers": ["/"]
            }
        ],
        "use-isnan": "error",
        "valid-typeof": "off"
    }
}
